import json
from textwrap import dedent
from typing import List

from agno.agent import Agent
from agno.models.google import Gemini
from pydantic import BaseModel, Field
from repomix import RepomixConfig, RepoProcessor

from agent.settings import GEMINI_MODEL_ID
from lib.utils import clean_repomix_output, exist, read, write


class Config(BaseModel):
    repo: str = Field(description="repo url")
    output: str = Field(description="repo mix output file path")
    report: str = Field(description="final report file path")
    ignore: List[str] = Field(description="ignore files")


def load_config(config: str) -> Config:
    with open(config, "r") as file:
        json_data = json.load(file)
    return Config.model_validate(json_data)


code_agent = Agent(
    name="Code Agent",
    model=Gemini(id=GEMINI_MODEL_ID),
    description=dedent("""\
        You are a good coder and need to explain what you have written to others.
        - The reader is a highly experienced developer, so no need to explain basic concepts."
        - Don't do function by function explanation, focus on the classes and modules and how they interact.
        - If there are any functions or classes that are used in multiple places(at least 3 times), highlight them and explain them.
        - If there are any design patterns used, explain them.
        - If there are any algorithms used, explain them.
        - Ignore those helper functions or classes.
        - Your tasks are to help the reader can grasp the codebase quickly, then they can start working on it or use it.
        - Be highly organized.\
        """),
    instructions=[
        "You will be given a text including the whole repository code.",
        "Explain the purpose of the repo and the problem it solves.",
        "Organize the code into sections and explain each section.",
        "Each section includes a group of functions or classes that are related to each other.",
        "Find SQL or 3rd party API calls and explain them.",
        "Highlight any important dependencies or running instructions that the coder points out.",
        "Provide insights, design experiences and creativity.",
    ],
    expected_output=dedent("""\
    A concise code explanation in markdown format:

    # {A Title That Captures the Essence of the Text}

    ## Summary
    {Brief overview of the codebase and the problem it solves}

    ## Modules
    - {Module 1}: {responsibility}
    - {Module 2}: {responsibility}

    ## Code Structure
    ### Section 1
    {Main purpose of the section}
    {Explanation of the functions or classes}
    {Important dependencies or running instructions}

    ### Section 2
    {Main purpose of the section}
    {Explanation of the functions or classes}
    {Important dependencies or running instructions}

    ## Db Schema
    {Explanation of the database schema}
    {Table 1}: {Description}
    {Table 2}: {Description}

    ## External API Calls
    - {API 1}: {Explanation}
    - {API 2}: {Explanation}    

    ## Insights
    {Your insights on the text}
    {The design experiences of the codebase}
    {The creativity in the codebase}

    ---
    Report generated by TSW-X
    Advanced Research Systems Division
    Date: {current_date}\
    """),
    markdown=False,
    add_datetime_to_instructions=True,
)


def explain_repo(config: str):
    c = load_config(config)
    repo_file = f"output/{c.output}"
    if not exist(repo_file):
        config = RepomixConfig()
        config.output.file_path = repo_file
        config.ignore.use_gitignore = True
        config.ignore.custom_patterns = c.ignore

        processor = RepoProcessor(repo_url=c.repo, config=config)
        result = processor.process()
        print("--------------------")
        print("Packing code into a markdown file...")
        print("-------- Result ------------")
        print(f"Total files: {result.total_files}")
        print(f"Total characters: {result.total_chars}")
        print(f"Total tokens: {result.total_tokens}")
        print(f"Output saved to: {result.config.output.file_path}")
        print("-------- Result ------------")
        cleaned_output = clean_repomix_output(repo_file)
        write(c.output, cleaned_output)
        code_for_agent = cleaned_output
    else:
        code_for_agent = read(repo_file)

    print("Explaining code...")
    write(c.report, code_agent.run(code_for_agent).content)
