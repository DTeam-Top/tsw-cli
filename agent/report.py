import time
from textwrap import dedent
from typing import List

from agno.agent import Agent, RunResponse
from agno.models.google import Gemini
from agno.tools.duckduckgo import DuckDuckGoTools
from pydantic import BaseModel

from agent.settings import MODEL_ID
from lib.utils import generate_pdf


class SubTopics(BaseModel):
    names: List[str]


decompose_agent = Agent(
    name="Decompose Agent",
    model=Gemini(id=MODEL_ID),
    description="You're a skilled decomposer with a talent for breaking down complex topics into digestible parts.",
    instructions=[
        "Thinking of a topic, break it down into its key components.",
        "return a list of the key components of the topic.",
        "the list should be ordered by importance.",
        "return a maximum of 5 subtopics.",
    ],
    show_tool_calls=True,
    markdown=True,
    response_model=SubTopics,
)


research_agent = Agent(
    name="Research Agent",
    model=Gemini(id=MODEL_ID),
    tools=[DuckDuckGoTools(fixed_max_results=10)],
    description="You're a seasoned researcher with a knack for uncovering the latest developments in a given topic.",
    instructions=[
        "Known for your ability to find the most relevant information and present it in a clear and concise manner.",
        "Always include links in the output",
    ],
    show_tool_calls=True,
    markdown=True,
)


def create_analysis_agent(lang: str) -> Agent:
    return Agent(
        name="Analysis Agent",
        model=Gemini(id=MODEL_ID),
        description=dedent("""\
            You're a meticulous analyst (TSW-X) with a keen eye for detail
            and a distinguished AI research scientist with expertise
            in analyzing and synthesizing complex information. Your specialty lies in creating
            compelling, fact-based reports that combine academic rigor with engaging narrative.

            Your writing style is:
            - Clear and authoritative
            - Engaging but professional
            - Fact-focused with proper citations
            - Accessible to educated non-specialists\
        """),
        instructions=[
            "You're known for your ability to turn complex data into clear and concise reports, making it easy for others to understand and act on the information you provide."
            "Generate a report based on the research results.",
            "Always include sources as a reference in the report",
            "The report should be informative with a clear structure and easy to understand.",
            "At the same time, the report should include a summary of the most important findings and insights.",
            "Output the report without any additional explanation or commentary.",
            f"Write the report in language: {lang}.",
        ],
        expected_output=dedent("""\
    A professional research report in markdown format:

    # {Compelling Title That Captures the Topic's Essence}

    ## Executive Summary
    {Brief overview of key findings and significance}

    ## Introduction
    {Context and importance of the topic}
    {Current state of research/discussion}

    ## Key Findings
    {Major discoveries or developments}
    {Supporting evidence and analysis}

    ## Implications
    {Impact on field/society}
    {Future directions}

    ## Key Takeaways
    - {Bullet point 1}
    - {Bullet point 2}
    - {Bullet point 3}

    ## References
    - [Source 1](link) - Key finding/quote
    - [Source 2](link) - Key finding/quote
    - [Source 3](link) - Key finding/quote

    ---
    Report generated by TSW-X
    Advanced Research Systems Division
    Date: {current_date}\
    """),
        show_tool_calls=True,
        markdown=True,
        add_datetime_to_instructions=True,
    )


def research(topic: str) -> str:
    result: RunResponse = decompose_agent.run(topic)
    subTopics = result.content
    research = []
    for sub_topic in subTopics:
        research.append(
            research_agent.run(
                f"What are the latest developments in {sub_topic}"
            ).content
        )
        # rate limiting
        time.sleep(1)
    return "\n".join(research)


def generate_report(topic: str, lang: str):
    researchResult = research(topic)
    analysisResult: RunResponse = create_analysis_agent(lang).run(researchResult)
    generate_pdf(topic, analysisResult.content)
