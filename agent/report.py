import json
from textwrap import dedent
from typing import List, Literal

from agno.agent import Agent, RunResponse
from agno.models.google import Gemini
from agno.tools.googlesearch import GoogleSearch
from pydantic import BaseModel, Field

from agent.settings import GEMINI_MODEL_ID
from lib.utils import output_content, send_mail


class Config(BaseModel):
    lang: str = Field(default="english", description="Language for the report")
    receivers: List[str] | None = Field(
        default=None, description="List of email receivers"
    )
    format: Literal["md", "pdf"] = Field(
        default="md", description="Output format of the report"
    )


research_agent = Agent(
    name="Research Agent",
    model=Gemini(id=GEMINI_MODEL_ID),
    tools=[GoogleSearch(fixed_max_results=20)],
    description="You're a meticulous researcher with a keen eye for detail.",
    instructions=[
        "first, for the given topic, think it in different aspects and generate 6 new topics.",
        "the subtopics should cover time, location, weather, economy, application and technology.",
        "then, search each subtopic with the given tool to gather information.",
        "finally, combine all the information and group them by subtopics.",
        "include the sources in a separate section.",
    ],
    show_tool_calls=True,
    markdown=True,
)


def create_analysis_agent(lang: str) -> Agent:
    return Agent(
        name="Analysis Agent",
        model=Gemini(id=GEMINI_MODEL_ID),
        description=dedent("""\
            You're a meticulous analyst (TSW-X) with a keen eye for detail
            and a distinguished AI research scientist with expertise
            in analyzing and synthesizing complex information. Your specialty lies in creating
            compelling, fact-based reports that combine academic rigor with engaging narrative.

            Your writing style is:
            - Clear and authoritative
            - Engaging but professional
            - Fact-focused with proper citations
            - Accessible to educated non-specialists\
        """),
        instructions=[
            "You're known for your ability to turn complex data into clear and concise reports, making it easy for others to understand and act on the information you provide."
            "Generate a report based on the research results.",
            "Always include sources as a reference in the report",
            "The report should be informative with a clear structure and easy to understand.",
            "At the same time, the report should include a summary of the most important findings and insights.",
            "Output the report without any additional explanation or commentary.",
            f"Write the report in language: {lang}.",
        ],
        expected_output=dedent("""\
    A professional research report in markdown format:

    # {Compelling Title That Captures the Topic's Essence}

    ## Executive Summary
    {Brief overview of key findings and significance}

    ## Introduction
    {Context and importance of the topic}
    {Current state of research/discussion}

    ## Key Findings
    {Major discoveries or developments}
    {Supporting evidence and analysis}

    ## Implications
    {Impact on field/society}
    {Future directions}

    ## Key Takeaways
    - {Bullet point 1}
    - {Bullet point 2}
    - {Bullet point 3}

    ## References
    - [Source 1](link) - Key finding/quote
    - [Source 2](link) - Key finding/quote
    - [Source 3](link) - Key finding/quote

    ---
    Report generated by TSW-X
    Advanced Research Systems Division
    Date: {current_date}\
    """),
        show_tool_calls=True,
        markdown=True,
        add_datetime_to_instructions=True,
    )


def research(topic: str) -> str:
    return research_agent.run(topic).content


def generate_report(topic: str, config: str | None):
    if config is None:
        c = Config()
    else:
        with open(config, "r") as file:
            json_data = json.load(file)
        c = Config.model_validate(json_data)
    researchResult = research(topic)
    analysisResult: RunResponse = create_analysis_agent(c.lang).run(researchResult)
    output_content(topic, c.format, analysisResult.content)
    if c.receivers:
        send_mail(topic, c.receivers, analysisResult.content)
